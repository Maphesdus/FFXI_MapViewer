#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexNormal;
layout(location = 3) in vec4 vertexColor;

// Output data ; will be interpolated for each fragment.
out vec2 UV;
out vec4 fragmentColor;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 MV;
uniform mat4 P;
void main(){
	// Output position of the vertex, in clip space : MVP * position
	//vec4 pos =  MVP * vec4(vertexPosition,1);
	mat4 view = mat4(mat3(MV));
	vec4 pos = P * view * vec4(vertexPosition,1);
	gl_Position = pos.xyww;

	// UV of the vertex. No special space for this one.
	UV = vertexUV;
	fragmentColor = vertexColor;
}

